{"version":3,"sources":["components/modal/modal.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Modal","imagesArray","idReceived","setModalVisible","useState","currentIndex","setCurrentIndex","id","className","onClick","map","image","index","console","log","key","style","width","src","download_url","alt","author","prevState","App","loading","setLoading","images","setImages","element","setElement","modalVisible","modalIdSent","setModalIdSent","page","useRef","prevY","observer","IntersectionObserver","entries","y","boundingClientRect","current","setTimeout","loadMore","threshold","handleInitial","fetchData","useCallback","pageNumber","a","url","axios","get","res","status","data","newImages","useEffect","currentElement","currentObserver","observe","unobserve","textAlign","listStyle","ref","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6UAqEeA,G,MA3DqB,SAAC,GAI9B,IAHLC,EAGI,EAHJA,YACAC,EAEI,EAFJA,WACAC,EACI,EADJA,gBACI,EACoCC,mBAASF,GAD7C,mBACGG,EADH,KACiBC,EADjB,KAGJ,OACE,6BACE,yBAAKC,GAAG,UAAUC,UAAU,SAC1B,yBAAKA,UAAU,iBACb,0BACEA,UAAU,QACVC,QAAS,WACPN,GAAgB,KAHpB,QASCF,EAAYS,KAAI,SAACC,EAAOC,GACvB,GAAIA,IAAUP,EAGZ,OAFAQ,QAAQC,IAAR,UAAeF,EAAf,gBAA4BP,IAG1B,yBAAKU,IAAKH,GACR,yBACEI,MAAO,CAAEC,MAAO,OAChBC,IAAKP,EAAMQ,aACXC,IAAKT,EAAMU,OACXb,UAAU,mBAOpB,4BACEC,QAAS,WACHJ,EAAe,GACjBC,GAAgB,SAACgB,GAAD,OAAeA,EAAY,OAHjD,YASA,4BACEb,QAAS,WACPH,GAAgB,SAACgB,GAAD,OAAeA,EAAY,OAF/C,aCiEKC,EApHH,WAAO,IAAD,EACcnB,oBAAS,GADvB,mBACToB,EADS,KACAC,EADA,OAEYrB,mBAAuB,IAFnC,mBAETsB,EAFS,KAEDC,EAFC,OAGcvB,mBAAc,MAH5B,mBAGTwB,EAHS,KAGAC,EAHA,OAIwBzB,oBAAS,GAJjC,mBAIT0B,EAJS,KAIK3B,EAJL,OAMsBC,mBAAS,GAN/B,mBAMT2B,EANS,KAMIC,EANJ,KAQVC,EAAOC,iBAAO,GACdC,EAAQD,iBAAO,GACfE,EAAWF,iBACf,IAAIG,sBACF,SAACC,GACC,IACMC,EADaD,EAAQ,GACNE,mBAAmBD,EAEpCJ,EAAMM,QAAUF,GAClBG,YAAW,kBAAMC,MAAY,KAG/BR,EAAMM,QAAUF,IAElB,CAAEK,UAAW,KAIXD,EAAW,WACfV,EAAKQ,UAELI,EAAcZ,EAAKQ,UAGfK,EAAYC,sBAAW,uCAAC,WAAOC,GAAP,qBAAAC,EAAA,6DAC5BpC,QAAQC,IAAI,eAAgBkC,GAEtBE,EAHsB,6CAGsBF,EAHtB,aAI5BvB,GAAW,GAJiB,kBAOR0B,IAAMC,IAAIF,GAPF,cAOpBG,EAPoB,OAQlBC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,KAEhB9B,GAAW,GAVe,kBAWnB,CAAE6B,SAAQC,SAXS,yCAa1B9B,GAAW,GAbe,kFAAD,sDAgB1B,IAEGoB,EAAgBE,sBAAW,uCAC/B,WAAOd,GAAP,mBAAAgB,EAAA,sEAC0BH,EAAUb,GADpC,OACQuB,EADR,OAEUF,EAAiBE,EAAjBF,OAAQC,EAASC,EAATD,KACD,MAAXD,GAAgB3B,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,YAA2B6B,OAH3D,2CAD+B,sDAM/B,CAACT,IAoBH,OAjBAW,qBAAU,WACRZ,EAAcZ,EAAKQ,SAEnB,IAAMiB,EAAiB9B,EACjB+B,EAAkBvB,EAASK,QAMjC,OAJIiB,GACFC,EAAgBC,QAAQF,GAGnB,WACDA,GACFC,EAAgBE,UAAUH,MAG7B,CAACb,EAAejB,IAGjB,yBAAKpB,UAAU,WAAWQ,MAAO,CAAE8C,UAAW,WAC3CpC,GACC,wBAAIV,MAAO,CAAE+C,UAAW,QAAUvD,UAAU,aACzCkB,EAAOhB,KAAI,SAACC,EAAOC,GAAR,OACV,wBACEG,IAAKH,EACLJ,UAAU,iBACVC,QAAS,WACPN,GAAgB,GAChB6B,EAAepB,KAGjB,yBACEI,MAAO,CAAEC,MAAO,QAChBC,IAAKP,EAAMQ,aACXC,IAAKT,EAAMU,OACXb,UAAU,oBAOnBgB,GAAW,2CAEZ,yBAAKwC,IAAKnC,EAAYrB,UAAU,mBAC9B,qDAEDsB,EACC,kBAAC,EAAD,CACE7B,YAAayB,EACbxB,WAAY6B,EACZ5B,gBAAiBA,SAEjB8D,ICxGUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtE,QAAQsE,MAAMA,EAAMC,c","file":"static/js/main.6679fd4c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Image } from \"../../typescript-interfaces/image.interface\";\r\nimport \"./modal.styles.scss\";\r\n\r\ninterface ModalProps {\r\n  imagesArray: Array<Image>;\r\n  idReceived: number;\r\n  setModalVisible: any;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({\r\n  imagesArray,\r\n  idReceived,\r\n  setModalVisible,\r\n}) => {\r\n  const [currentIndex, setCurrentIndex] = useState(idReceived);\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"myModal\" className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <span\r\n            className=\"close\"\r\n            onClick={() => {\r\n              setModalVisible(false);\r\n            }}\r\n          >\r\n            &times;\r\n          </span>\r\n\r\n          {imagesArray.map((image, index) => {\r\n            if (index === currentIndex) {\r\n              console.log(`${index} === ${currentIndex}`);\r\n\r\n              return (\r\n                <div key={index}>\r\n                  <img\r\n                    style={{ width: \"50%\" }}\r\n                    src={image.download_url}\r\n                    alt={image.author}\r\n                    className=\"imageStyle\"\r\n                  />\r\n                </div>\r\n              );\r\n            }\r\n          })}\r\n\r\n          <button\r\n            onClick={() => {\r\n              if (currentIndex > 0) {\r\n                setCurrentIndex((prevState) => prevState - 1);\r\n              }\r\n            }}\r\n          >\r\n            Previous\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setCurrentIndex((prevState) => prevState + 1);\r\n            }}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport axios from \"axios\";\nimport { Image } from \"./typescript-interfaces/image.interface\";\nimport Modal from \"./components/modal/modal.component\";\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [images, setImages] = useState<Array<Image>>([]);\n  const [element, setElement] = useState<any>(null);\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const [modalIdSent, setModalIdSent] = useState(1);\n\n  const page = useRef(1);\n  const prevY = useRef(0);\n  const observer = useRef(\n    new IntersectionObserver(\n      (entries) => {\n        const firstEntry = entries[0];\n        const y = firstEntry.boundingClientRect.y;\n\n        if (prevY.current > y) {\n          setTimeout(() => loadMore(), 1000); // 1 sec delay\n        }\n\n        prevY.current = y;\n      },\n      { threshold: 1 }\n    )\n  );\n\n  const loadMore = () => {\n    page.current++;\n\n    handleInitial(page.current);\n  };\n\n  const fetchData = useCallback(async (pageNumber) => {\n    console.log(\"pageNumber: \", pageNumber);\n\n    const url = `https://picsum.photos/v2/list?page=${pageNumber}&limit=15`;\n    setLoading(true);\n\n    try {\n      const res = await axios.get(url);\n      const { status, data } = res;\n\n      setLoading(false);\n      return { status, data };\n    } catch (e) {\n      setLoading(false);\n      return e;\n    }\n  }, []);\n\n  const handleInitial = useCallback(\n    async (page) => {\n      const newImages = await fetchData(page);\n      const { status, data } = newImages;\n      if (status === 200) setImages((images) => [...images, ...data]);\n    },\n    [fetchData]\n  );\n\n  useEffect(() => {\n    handleInitial(page.current);\n\n    const currentElement = element;\n    const currentObserver = observer.current;\n\n    if (currentElement) {\n      currentObserver.observe(currentElement);\n    }\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  }, [handleInitial, element]);\n\n  return (\n    <div className=\"appStyle\" style={{ textAlign: \"center\" }}>\n      {images && (\n        <ul style={{ listStyle: \"none\" }} className=\"imageGrid\">\n          {images.map((image, index) => (\n            <li\n              key={index}\n              className=\"imageContainer\"\n              onClick={() => {\n                setModalVisible(true);\n                setModalIdSent(index);\n              }}\n            >\n              <img\n                style={{ width: \"95vw\" }}\n                src={image.download_url}\n                alt={image.author}\n                className=\"imageStyle\"\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {loading && <li>Loading ...</li>}\n\n      <div ref={setElement} className=\"buttonContainer\">\n        <h1>Loading more content</h1>\n      </div>\n      {modalVisible ? (\n        <Modal\n          imagesArray={images}\n          idReceived={modalIdSent}\n          setModalVisible={setModalVisible}\n        />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}